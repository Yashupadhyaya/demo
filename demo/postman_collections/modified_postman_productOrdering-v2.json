{
  "item": [
    {
      "id": "f89bcfbb-1922-4653-bfe4-9219449ad8e7",
      "name": "productOrder",
      "item": [
        {
          "id": "4b516755-0a58-4459-999b-b033fd3b6670",
          "name": "Request Opening Order",
          "request": {
            "name": "Request Opening Order",
            "description": {},
            "url": {
              "path": [
                "productOrder"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "x-request-id",
                "value": "{{x-request-id}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "x-service-host",
                "value": "{{x-service-host}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"order\": {\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n            \"type\": \"{{type}}\",\n            \"infraType\": \"{{infraType}}\",\n            \"customer\": {\n                \"customer\": {\n                    \"name\": \"{{name}}\",\n                    \"subscriberId\": \"{{subscriberId}}\",\n                    \"phoneNumber\": {\n                        \"phoneNumbers\": \"{{phoneNumbers}}\"\n                    },\n                    \"subscriberIdOld\": \"{{subscriberIdOld}}\",\n                    \"businessUnity\": \"{{businessUnity}}\",\n                    \"fantasyName\": \"{{fantasyName}}\",\n                    \"workContact\": {\n                        \"name\": \"{{name}}\",\n                        \"email\": \"{{email}}\",\n                        \"phone\": \"{{phone}}\"\n                    }\n                }\n            },\n            \"appointment\": {\n                \"appointment\": {\n                    \"hasSlot\": \"{{hasSlot}}\",\n                    \"mandatoryType\": \"{{mandatoryType}}\",\n                    \"date\": \"{{date}}\",\n                    \"workOrderId\": \"{{workOrderId}}\"\n                }\n            },\n            \"addresses\": {\n                \"addresses\": {\n                    \"address\": {\n                        \"id\": \"{{id}}\",\n                        \"inventoryId\": \"{{inventoryId}}\",\n                        \"reference\": \"{{reference}}\",\n                        \"complement\": {\n                            \"complement\": {\n                                \"value\": \"{{value}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"addressChange\": {\n                \"flag\": false\n            },\n            \"products\": {\n                \"products\": {\n                    \"product\": \"{{product}}\"\n                }\n            },\n            \"equipments\": {\n                \"equipments\": {\n                    \"equipment\": \"{{equipment}}\"\n                }\n            },\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"orderItem\": \"{{orderItem}}\",\n            \"task\": {\n                \"code\": {\n                    \"code\": \"{{code}}\"\n                },\n                \"description\": \"{{description}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "87e32b6b-5c51-497c-89c3-90d8c85e0715",
              "name": "Created",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"201\",\n    \"message\": \"Created\"\n  },\n  \"order\": {\n    \"id\": \"20230315000001\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "56a30e6e-6c6b-4ac4-9e11-5a767cf7eefe",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1f99269d-3810-462d-a7d2-aa3c170d4330",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "bc71b28c-a7ea-406f-8b7b-a1deabb32f73",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "98ce6afd-1a10-4191-b8e0-2718a15b2115",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "51422f60-37e5-43c1-951d-c72d3025e31c",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "93e86649-b7dc-4fd9-b331-670b858648f2",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "bc7a2bed-0b9e-48b9-a01a-352ddcb1fb9b",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c38513b3-8412-45ab-bd2f-a9f96909e35a",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c1ce4faf-89e0-48b9-87e4-d53fbf1d2b4d",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n        // ********RoostGPT********\n/*\nTest generated by RoostGPT for test orderapi-restassured using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /productOrder for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n        let responseData;\n        const contentType = pm.response.headers.get('Content-Type');\n        if(contentType === \"application/xml\"){\n            responseData = xml2Json(responseBody);\n        } else{\n            responseData = pm.response.json();\n        }\n        if (pm.variables.get(\"statusCode\")) {\n          // Compare the statusCode variable with the response code for assertion\n          pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n        }\n\n        // let responseTime = 800\n        // pm.expect(pm.response.responseTime).to.be.below(responseTime);\n        \nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control`)){\n          if(pm.expect(_.get(responseData[0], `control`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n          if(pm.expect(_.get(pm.response.json(), `control`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.type`)){\n          if(pm.expect(_.get(responseData[0], `control.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n          if(pm.expect(_.get(pm.response.json(), `control.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('control.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.message`)){\n          if(pm.expect(_.get(responseData[0], `control.message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n          if(pm.expect(_.get(pm.response.json(), `control.message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('control.message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.code`)){\n          if(pm.expect(_.get(responseData[0], `control.code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n          if(pm.expect(_.get(pm.response.json(), `control.code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('control.code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `order` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`order`)){\n          if(pm.expect(_.get(responseData[0], `order`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `order`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `order` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`order`)){\n          if(pm.expect(_.get(pm.response.json(), `order`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `order`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `order.id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`order.id`)){\n          if(pm.expect(_.get(responseData[0], `order.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `order.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `order.id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`order.id`)){\n          if(pm.expect(_.get(pm.response.json(), `order.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `order.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('order.id length to be atmost `25`',function(){\n          pm.expect(_.get(responseData, \"order.id\", \"\").length).to.be.at.most(25);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "cfcb8bd2-6a23-47ae-866b-b5c1f5a898cb",
          "name": "Patch Product Order By Id",
          "request": {
            "name": "Patch Product Order By Id",
            "description": {},
            "url": {
              "path": [
                "productOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"addresses\": {\n            \"addresses\": {\n                \"address\": {\n                    \"id\": \"{{id}}\",\n                    \"inventoryId\": \"{{inventoryId}}\",\n                    \"reference\": \"{{reference}}\",\n                    \"complement\": {\n                        \"complement\": {\n                            \"complements\": \"{{complements}}\"\n                        }\n                    }\n                }\n            }\n        },\n        \"customer\": {\n            \"customer\": {\n                \"name\": \"{{name}}\",\n                \"subscriberId\": \"{{subscriberId}}\",\n                \"phoneNumber\": {\n                    \"phoneNumbers\": \"{{phoneNumbers}}\"\n                },\n                \"subscriberIdOld\": \"{{subscriberIdOld}}\",\n                \"businessUnity\": \"{{businessUnity}}\",\n                \"fantasyName\": \"{{fantasyName}}\",\n                \"workContact\": {\n                    \"name\": \"{{name}}\",\n                    \"email\": \"{{email}}\",\n                    \"phone\": \"{{phone}}\"\n                }\n            }\n        },\n        \"appointment\": {\n            \"appointment\": {\n                \"hasSlot\": \"{{hasSlot}}\",\n                \"mandatoryType\": \"{{mandatoryType}}\",\n                \"date\": \"{{date}}\",\n                \"workOrderId\": \"{{workOrderId}}\"\n            }\n        },\n        \"products\": {\n            \"products\": {\n                \"product\": \"{{product}}\"\n            }\n        },\n        \"equipments\": {\n            \"equipments\": {\n                \"equipment\": \"{{equipment}}\"\n            }\n        },\n        \"issue\": {\n            \"issue\": {\n                \"code\": {\n                    \"code\": \"{{code}}\"\n                },\n                \"description\": {\n                    \"description\": \"{{description}}\"\n                },\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        },\n        \"orderItem\": \"{{orderItem}}\",\n        \"task\": {\n            \"code\": {\n                \"code\": \"{{code}}\"\n            },\n            \"description\": \"{{description}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "4c9127b7-440f-41cf-a838-e22c2ae6ea81",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"200\",\n    \"message\": \"OK\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b41fe4ad-66ba-46b5-bdb2-9be9ae09dcbb",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ea268423-c81d-4e25-897e-86950de0e141",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e81a8eaa-c7d7-4c4f-b792-95df9a782e34",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "39bc962d-04b6-44cb-b11e-e16d00d91950",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1b284d0f-ec21-4e8d-ad03-a679e699ba0f",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "471629f5-d3e7-4578-9519-47eaa114d461",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8d53b64f-202a-414e-b7c2-93c4e166bf85",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6e86a767-7599-4a0c-84df-2124c72b86b3",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4935f3cd-65b4-47e4-9e77-8d69d72cd500",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n        // ********RoostGPT********\n/*\nTest generated by RoostGPT for test orderapi-restassured using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /productOrder/:order.Id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n        let responseData;\n        const contentType = pm.response.headers.get('Content-Type');\n        if(contentType === \"application/xml\"){\n            responseData = xml2Json(responseBody);\n        } else{\n            responseData = pm.response.json();\n        }\n        if (pm.variables.get(\"statusCode\")) {\n          // Compare the statusCode variable with the response code for assertion\n          pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n        }\n\n        // let responseTime = 800\n        // pm.expect(pm.response.responseTime).to.be.below(responseTime);\n        \nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "2c6706ce-cf98-4966-8332-2ef7de3969d7",
      "name": "Cancel Product Order By Id",
      "request": {
        "name": "Cancel Product Order By Id",
        "description": {},
        "url": {
          "path": [
            "cancelProductOrder",
            ":order.Id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{order.Id}}",
              "key": "order.Id",
              "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
            }
          ]
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "aeb2b49c-f25b-41f9-b113-b9efd482502e",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"200\",\n    \"message\": \"OK\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "6a9f1b20-b507-4108-a453-93154a58f987",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f0ee5269-e57b-4e95-9a7d-8ff025306776",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "e0f91f26-0d7d-4c62-b047-e536675dffc8",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "59dfdf15-ead6-4c6c-9bb6-f1dcd579e23f",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "36241bb4-02ed-41a5-ae0f-3279846ba766",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "d5965f25-0372-4929-89b3-0e8b5a5c07a6",
          "name": "Locked",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Locked (WebDAV) (RFC 4918)",
          "code": 423,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"423\",\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "de048082-e72b-419c-abe2-5e4d69838546",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "30b4b418-5832-44cf-9aa5-e05d2b5be989",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3a67977e-b9d1-41f9-aff4-782eae4f2d3e",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "8bd6f67a-4fc6-402f-926d-732123249287",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n        // ********RoostGPT********\n/*\nTest generated by RoostGPT for test orderapi-restassured using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /cancelProductOrder/:order.Id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n        let responseData;\n        const contentType = pm.response.headers.get('Content-Type');\n        if(contentType === \"application/xml\"){\n            responseData = xml2Json(responseBody);\n        } else{\n            responseData = pm.response.json();\n        }\n        if (pm.variables.get(\"statusCode\")) {\n          // Compare the statusCode variable with the response code for assertion\n          pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n        }\n\n        // let responseTime = 800\n        // pm.expect(pm.response.responseTime).to.be.below(responseTime);\n        \nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "b6dcb692-22fe-4764-a556-e90d4dd0ef7a",
      "name": "listener",
      "item": [
        {
          "id": "c61ab55a-3811-4001-9cf5-e0fb2589fb3b",
          "name": "State Change Event By Client",
          "request": {
            "name": "State Change Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderStateChangeEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "f9a88f23-db9e-4160-b1cd-8358aecec752",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e2f1b1e7-71cd-4c5b-8736-52f9a4aa1eba",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "bad1a98b-2a5e-47c1-8e26-b5559d67e08a",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "74a56206-71d5-4499-849c-5b63fa074a9b",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6d5c3a7b-c674-4168-b333-3ff942ac7f59",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "dce7ab7e-1c5e-4070-9291-babed1936c07",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n        // ********RoostGPT********\n/*\nTest generated by RoostGPT for test orderapi-restassured using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderStateChangeEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n        let responseData;\n        const contentType = pm.response.headers.get('Content-Type');\n        if(contentType === \"application/xml\"){\n            responseData = xml2Json(responseBody);\n        } else{\n            responseData = pm.response.json();\n        }\n        if (pm.variables.get(\"statusCode\")) {\n          // Compare the statusCode variable with the response code for assertion\n          pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n        }\n\n        // let responseTime = 800\n        // pm.expect(pm.response.responseTime).to.be.below(responseTime);\n        \nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "415698d9-a65d-4535-828f-29a2fcf95c97",
          "name": "Product Order Create Event By Client",
          "request": {
            "name": "Product Order Create Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderCreateEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "6f49876a-40d3-4092-a021-3770a399e376",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d3973dd6-8430-48a2-a64c-b8b249a17dd1",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0fd3a100-362f-4fe8-836b-f4917e442fa1",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b44b8e0d-88ed-48fd-9e0f-85ed001875d1",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e06cea71-920a-414a-a3dc-496f6b8bf94a",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0e7eb421-2283-405f-a43a-e72040c3d501",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n        // ********RoostGPT********\n/*\nTest generated by RoostGPT for test orderapi-restassured using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderCreateEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n        let responseData;\n        const contentType = pm.response.headers.get('Content-Type');\n        if(contentType === \"application/xml\"){\n            responseData = xml2Json(responseBody);\n        } else{\n            responseData = pm.response.json();\n        }\n        if (pm.variables.get(\"statusCode\")) {\n          // Compare the statusCode variable with the response code for assertion\n          pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n        }\n\n        // let responseTime = 800\n        // pm.expect(pm.response.responseTime).to.be.below(responseTime);\n        \nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "a4800d38-e0a3-4e3b-99d3-1146c0a824a2",
          "name": "Product Order Information Required Event",
          "request": {
            "name": "Product Order Information Required Event",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderInformationRequiredEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "df0155ee-fcec-4585-9d6f-57f3be721c9f",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7c0c0dc1-0e49-4fd2-904d-23a5fe4db3a5",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "accbed76-a95b-4ec1-92d5-f583ad461788",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "acd7f352-2ebf-496b-b347-b61608fc73b4",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6b077bbb-1b75-4b35-8da2-0f9d8afc14e6",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "ac5270bb-126e-4aee-955a-bccc0a49047e",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n        // ********RoostGPT********\n/*\nTest generated by RoostGPT for test orderapi-restassured using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderInformationRequiredEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n        let responseData;\n        const contentType = pm.response.headers.get('Content-Type');\n        if(contentType === \"application/xml\"){\n            responseData = xml2Json(responseBody);\n        } else{\n            responseData = pm.response.json();\n        }\n        if (pm.variables.get(\"statusCode\")) {\n          // Compare the statusCode variable with the response code for assertion\n          pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n        }\n\n        // let responseTime = 800\n        // pm.expect(pm.response.responseTime).to.be.below(responseTime);\n        \nif (pm.response.code == 204){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b0f65e5c-fcd2-4ad2-b81f-01838597f61f",
          "name": "Cancel Product Order Create Event By Client",
          "request": {
            "name": "Cancel Product Order Create Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "cancelProductOrderCreateEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "02a7ecdb-983d-434d-9b83-aa25151d6b62",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "ea208706-0400-4032-a9d4-95004f7d6565",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "02bc2d24-6154-4b72-8c3d-09ff3157217d",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "ea5764a4-c184-4069-8acb-6d68e2c7a696",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "20b7ab4d-85d3-4b44-adbd-e509335baed6",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "da9255cb-e908-4e8c-8663-5d38db378f0f",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n        // ********RoostGPT********\n/*\nTest generated by RoostGPT for test orderapi-restassured using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/cancelProductOrderCreateEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n        let responseData;\n        const contentType = pm.response.headers.get('Content-Type');\n        if(contentType === \"application/xml\"){\n            responseData = xml2Json(responseBody);\n        } else{\n            responseData = pm.response.json();\n        }\n        if (pm.variables.get(\"statusCode\")) {\n          // Compare the statusCode variable with the response code for assertion\n          pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n        }\n\n        // let responseTime = 800\n        // pm.expect(pm.response.responseTime).to.be.below(responseTime);\n        \nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "X-Username"
      },
      {
        "key": "value",
        "value": "{{apiKey}}"
      },
      {
        "key": "in",
        "value": "header"
      }
    ]
  },
  "info": {
    "_postman_id": "aeefa4b8-0760-4785-8087-1ebe04a36278",
    "name": "ProductOrdering",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}