{
  "item": [
    {
      "id": "077e7b53-dc15-4a38-aa25-96849e5df13a",
      "name": "productOrder",
      "item": [
        {
          "id": "80b40baa-6c90-4680-b489-7bb2cf1d24e9",
          "name": "Request Opening Order",
          "request": {
            "name": "Request Opening Order",
            "description": {},
            "url": {
              "path": [
                "productOrder"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "x-request-id",
                "value": "{{x-request-id}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "x-service-host",
                "value": "{{x-service-host}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"order\": {\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n            \"type\": \"{{type}}\",\n            \"infraType\": \"{{infraType}}\",\n            \"customer\": {\n                \"customer\": {\n                    \"name\": \"{{name}}\",\n                    \"subscriberId\": \"{{subscriberId}}\",\n                    \"phoneNumber\": {\n                        \"phoneNumbers\": \"{{phoneNumbers}}\"\n                    },\n                    \"subscriberIdOld\": \"{{subscriberIdOld}}\",\n                    \"businessUnity\": \"{{businessUnity}}\",\n                    \"fantasyName\": \"{{fantasyName}}\",\n                    \"workContact\": {\n                        \"name\": \"{{name}}\",\n                        \"email\": \"{{email}}\",\n                        \"phone\": \"{{phone}}\"\n                    }\n                }\n            },\n            \"appointment\": {\n                \"appointment\": {\n                    \"hasSlot\": \"{{hasSlot}}\",\n                    \"mandatoryType\": \"{{mandatoryType}}\",\n                    \"date\": \"{{date}}\",\n                    \"workOrderId\": \"{{workOrderId}}\"\n                }\n            },\n            \"addresses\": {\n                \"addresses\": {\n                    \"address\": {\n                        \"id\": \"{{id}}\",\n                        \"inventoryId\": \"{{inventoryId}}\",\n                        \"reference\": \"{{reference}}\",\n                        \"complement\": {\n                            \"complement\": {\n                                \"value\": \"{{value}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"addressChange\": {\n                \"flag\": false\n            },\n            \"products\": {\n                \"products\": {\n                    \"product\": \"{{product}}\"\n                }\n            },\n            \"equipments\": {\n                \"equipments\": {\n                    \"equipment\": \"{{equipment}}\"\n                }\n            },\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"orderItem\": \"{{orderItem}}\",\n            \"task\": {\n                \"code\": {\n                    \"code\": \"{{code}}\"\n                },\n                \"description\": \"{{description}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "87bea152-b219-481e-8447-28712771e3a2",
              "name": "Created",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"201\",\n    \"message\": \"Created\"\n  },\n  \"order\": {\n    \"id\": \"20230315000001\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ae4263f7-b53e-4df6-be9e-b113ee927bd0",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ebd90185-4d80-4557-a2e0-47ca98287fef",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "048e0e53-5a99-4f0d-b322-b06da7f11573",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "146f1a91-ff93-4f57-b942-b864a702777a",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "441caa02-9243-4c00-bc6e-d4ad47ae78fb",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4e2b61d9-0c31-4aef-8687-b036ffd295c4",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4e824dd5-6dd7-4dc3-8112-85648977fdb4",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "634e03f1-0b19-4254-a85d-da14d3715420",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b0a9e884-e557-4459-8510-1adbc24c8ba3",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-request-id",
                    "value": "{{x-request-id}}"
                  },
                  {
                    "disabled": false,
                    "description": "(Required) ",
                    "key": "x-service-host",
                    "value": "{{x-service-host}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postmanorderapi using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /productOrder for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\n    if (pm.response.code == 201){\n        pm.test(\"Created\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Created\");\n          pm.test('Response has the `control` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n                  if(pm.expect(_.get(pm.response.json(), `control`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `control.type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n                  if(pm.expect(_.get(pm.response.json(), `control.type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('control.type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('control.type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `control.message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n                  if(pm.expect(_.get(pm.response.json(), `control.message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `control.message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `control.message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`control.message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `control.message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `control.message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('control.message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"control.message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('control.message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"control.message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `control.code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n                  if(pm.expect(_.get(pm.response.json(), `control.code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('control.code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n          })\n\n          pm.test('Response has the `order` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`order`)){\n                  if(pm.expect(_.get(pm.response.json(), `order`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `order`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `order.id` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`order.id`)){\n                  if(pm.expect(_.get(pm.response.json(), `order.id`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `order.id`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('order.id length to be atmost `25`',function(){\n              pm.expect(_.get(responseData, \"order.id\", \"\").length).to.be.at.most(25);\n          })\n});\n}\n\n    if (pm.response.code == 400){\n        pm.test(\"BadRequest\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 401){\n        pm.test(\"Unauthorized\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 403){\n        pm.test(\"Forbidden - Scope Not Permitted\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 404){\n        pm.test(\"Not Found\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 406){\n        pm.test(\"Not Found\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 429){\n        pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 500){\n        pm.test(\"Internal Server Error\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 503){\n        pm.test(\"Service Unavailable\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 504){\n        pm.test(\"Gateway Timeout\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "e02069b1-3c1c-4072-8484-2a752a164197",
          "name": "Patch Product Order By Id",
          "request": {
            "name": "Patch Product Order By Id",
            "description": {},
            "url": {
              "path": [
                "productOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"addresses\": {\n            \"addresses\": {\n                \"address\": {\n                    \"id\": \"{{id}}\",\n                    \"inventoryId\": \"{{inventoryId}}\",\n                    \"reference\": \"{{reference}}\",\n                    \"complement\": {\n                        \"complement\": {\n                            \"complements\": \"{{complements}}\"\n                        }\n                    }\n                }\n            }\n        },\n        \"customer\": {\n            \"customer\": {\n                \"name\": \"{{name}}\",\n                \"subscriberId\": \"{{subscriberId}}\",\n                \"phoneNumber\": {\n                    \"phoneNumbers\": \"{{phoneNumbers}}\"\n                },\n                \"subscriberIdOld\": \"{{subscriberIdOld}}\",\n                \"businessUnity\": \"{{businessUnity}}\",\n                \"fantasyName\": \"{{fantasyName}}\",\n                \"workContact\": {\n                    \"name\": \"{{name}}\",\n                    \"email\": \"{{email}}\",\n                    \"phone\": \"{{phone}}\"\n                }\n            }\n        },\n        \"appointment\": {\n            \"appointment\": {\n                \"hasSlot\": \"{{hasSlot}}\",\n                \"mandatoryType\": \"{{mandatoryType}}\",\n                \"date\": \"{{date}}\",\n                \"workOrderId\": \"{{workOrderId}}\"\n            }\n        },\n        \"products\": {\n            \"products\": {\n                \"product\": \"{{product}}\"\n            }\n        },\n        \"equipments\": {\n            \"equipments\": {\n                \"equipment\": \"{{equipment}}\"\n            }\n        },\n        \"issue\": {\n            \"issue\": {\n                \"code\": {\n                    \"code\": \"{{code}}\"\n                },\n                \"description\": {\n                    \"description\": \"{{description}}\"\n                },\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        },\n        \"orderItem\": \"{{orderItem}}\",\n        \"task\": {\n            \"code\": {\n                \"code\": \"{{code}}\"\n            },\n            \"description\": \"{{description}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "00b692f7-0a7a-4ce7-9b62-268791387e8f",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"200\",\n    \"message\": \"OK\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c8980bd1-2894-4616-a66f-3b5677f63c55",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "035985fe-7961-412c-9a80-cf0937c00ca1",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "347daee6-a148-4a24-a3e7-67e0252fd717",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "871ab692-8ab8-4d08-b6e9-6bf90699b13c",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5bcfa799-2936-4478-969f-30548ef604c4",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "57e7e15f-21c9-4e73-971c-118a9a086224",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ba25207e-a1c1-4478-aec3-77966aea3ba4",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "419b46cc-1442-481e-be00-1f72e13457fb",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "28d6aaa2-750e-40f3-8d6a-e2348cb58cfe",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postmanorderapi using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /productOrder/:order.Id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\n    if (pm.response.code == 200){\n        pm.test(\"Success\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 400){\n        pm.test(\"Bad Request\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 401){\n        pm.test(\"Unauthorized\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 403){\n        pm.test(\"Forbidden - Scope Not Permitted\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 404){\n        pm.test(\"Not Found\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 406){\n        pm.test(\"Not Found\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 429){\n        pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 500){\n        pm.test(\"Internal Server Error\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 503){\n        pm.test(\"Service Unavailable\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\n    if (pm.response.code == 504){\n        pm.test(\"Gateway Timeout\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "ef4aca83-745a-4cd6-8c3c-cbb93e9ace36",
      "name": "Cancel Product Order By Id",
      "request": {
        "name": "Cancel Product Order By Id",
        "description": {},
        "url": {
          "path": [
            "cancelProductOrder",
            ":order.Id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{order.Id}}",
              "key": "order.Id",
              "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
            }
          ]
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "689d0d74-53bc-44c3-9b3a-1405132e2611",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"200\",\n    \"message\": \"OK\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "bc2dbad5-06d9-4e24-865e-9645f2c36a31",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3a537c28-c906-421c-baa2-3a77d8708ca8",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a8f49dc0-77b9-4b22-ace7-7eaf577c9737",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "08b70b42-4f55-42b8-a858-3bbcd9343dfb",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "5cedc3b8-1df8-414a-822b-33b5ab5bff55",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "09e3dd5f-c517-49c6-9224-0fce9700b5ee",
          "name": "Locked",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Locked (WebDAV) (RFC 4918)",
          "code": 423,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"423\",\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "919ab171-1014-4b46-b7c1-378573a4b90c",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "62c47067-bdd9-4c0f-a2dc-6f14a63af2ee",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "694dd60a-2065-4370-896f-13b590ded7c7",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "11006e51-6143-4df8-a5be-959113e4f069",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-Username",
                "value": "{{X-Username}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postmanorderapi using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /cancelProductOrder/:order.Id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\n    if (pm.response.code == 200){\n        pm.test(\"Success\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 400){\n        pm.test(\"Bad Request\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 401){\n        pm.test(\"Unauthorized\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 403){\n        pm.test(\"Forbidden - Scope Not Permitted\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 404){\n        pm.test(\"Not Found\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 406){\n        pm.test(\"Not Found\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 423){\n        pm.test(\"Locked\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 429){\n        pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 500){\n        pm.test(\"Internal Server Error\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 503){\n        pm.test(\"Service Unavailable\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\n    if (pm.response.code == 504){\n        pm.test(\"Gateway Timeout\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "b0df6ed4-cb01-4485-bc0d-72f957ea5906",
      "name": "listener",
      "item": [
        {
          "id": "aafd9dab-e5d5-4e19-8fa7-e03e0d42431d",
          "name": "State Change Event By Client",
          "request": {
            "name": "State Change Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderStateChangeEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "1af870ef-c0cc-400e-a0fc-0bfc74b89b81",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2235e41c-1e1b-4439-aecd-e1ab9e7bbba9",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "94b42f47-ffec-4835-a844-38ec6048004f",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7b399601-0cd5-4053-9a26-73cdd9d85ff6",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "faa4c4f9-53e7-4ab1-a699-b25dafbf52e9",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2abef6ff-639b-4d0b-a449-1bb5067125fc",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postmanorderapi using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderStateChangeEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\n    if (pm.response.code == 204){\n        pm.test(\"Operação realizada com sucesso\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\n    if (pm.response.code == 400){\n        pm.test(\"BadRequest\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 401){\n        pm.test(\"Unauthorized\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 500){\n        pm.test(\"ServerError\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 503){\n        pm.test(\"Unavailable\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 504){\n        pm.test(\"Timeout\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "02e30b88-f890-4887-9952-677151b4ec56",
          "name": "Product Order Create Event By Client",
          "request": {
            "name": "Product Order Create Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderCreateEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "d0c80dfb-ab3f-4111-b1fd-b0ba9912f2ff",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2fb9dda1-c80b-416d-96e9-24747808a23e",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "3caf098a-d9cf-4275-bb17-cb0d1f6ad7ba",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "24d394fd-652f-406f-adfa-a15910e627d3",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "690ad910-a275-477e-9bc0-c36d41a24432",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2604cdfb-3754-4bf7-aca9-d62727bf20a4",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postmanorderapi using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderCreateEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\n    if (pm.response.code == 204){\n        pm.test(\"Operação realizada com sucesso\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\n    if (pm.response.code == 400){\n        pm.test(\"BadRequest\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 401){\n        pm.test(\"Unauthorized\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 500){\n        pm.test(\"ServerError\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 503){\n        pm.test(\"Unavailable\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 504){\n        pm.test(\"Timeout\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "e28fa5f2-7d51-4b1c-8f6d-6326bfee427c",
          "name": "Product Order Information Required Event",
          "request": {
            "name": "Product Order Information Required Event",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderInformationRequiredEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "2dde056f-746a-4e11-b9ea-84b1aefaa7f7",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5f5f15a1-80f0-40f8-b027-26c868cfa43d",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "41b27e3b-ee22-4d3f-a235-72e3ff4277ff",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b0c417cc-373d-4bcc-ab42-a60c85d1885f",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c4814543-1ba8-4c8a-a12e-09f066d10fd4",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "00d62b2d-23c4-4335-b56d-4faea5ba458e",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postmanorderapi using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderInformationRequiredEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\n    if (pm.response.code == 204){\n        pm.test(\"Success\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\n    if (pm.response.code == 400){\n        pm.test(\"BadRequest\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 401){\n        pm.test(\"Unauthorized\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 500){\n        pm.test(\"ServerError\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 503){\n        pm.test(\"Unavailable\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n\n    if (pm.response.code == 504){\n        pm.test(\"Timeout\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.test('Response has the `type` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n                  if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('type to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('type length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `message` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                  if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"object\");\n                  }\n\n              }\n\n          })\n\n          pm.test('Response has the `message.Yash` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`message.Yash`)){\n                  if(pm.expect(_.get(pm.response.json(), `message.Yash`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `message.Yash`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n \n          pm.test('message.Yash to be one of enum', function(){ \n              pm.expect(_.get(responseData, \"message.Yash\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n          })\n  \n          pm.test('message.Yash length to be atmost `1`',function(){\n              pm.expect(_.get(responseData, \"message.Yash\", \"\").length).to.be.at.most(1);\n          })\n\n          pm.test('Response has the `code` field',function(){\n              if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                  if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n                    pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                  }\n\n              }\n\n          })\n  \n          pm.test('code length to be atmost `3`',function(){\n              pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n          })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "07eae71f-707f-4ffc-9fb4-e885d23a4714",
          "name": "Cancel Product Order Create Event By Client",
          "request": {
            "name": "Cancel Product Order Create Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "cancelProductOrderCreateEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "69a210ce-04e3-4da8-9e7d-1c9b50fb1bc7",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "87fc0ce6-2a50-448d-898e-f1086598b83a",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4ce57e80-05c9-4021-8ba4-2b16c3a0ba0a",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e58429c1-dd81-47d5-a097-870be7e0dfec",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "55a096d2-c91a-450d-8662-121c59aa2364",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "195470a0-ffc6-4013-9848-7147c2310e78",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "X-Username",
                    "value": "{{X-Username}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test testing-postmanorderapi using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/cancelProductOrderCreateEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\n    if (pm.response.code == 204){\n        pm.test(\"Operação realizada com sucesso\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\n    if (pm.response.code == 400){\n        pm.test(\"BadRequest\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\n    if (pm.response.code == 401){\n        pm.test(\"Unauthorized\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\n    if (pm.response.code == 500){\n        pm.test(\"ServerError\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n\n    if (pm.response.code == 503){\n        pm.test(\"Unavailable\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");});\n}\n\n    if (pm.response.code == 504){\n        pm.test(\"Timeout\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "X-Username"
      },
      {
        "key": "value",
        "value": "{{apiKey}}"
      },
      {
        "key": "in",
        "value": "header"
      }
    ]
  },
  "info": {
    "_postman_id": "e0ed9487-0916-46a3-ba26-1798fc30d785",
    "name": "ProductOrdering",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}